//taskd.c
//Made by jason@pkuxkx
//2001.1.3
//last modified 2001/1/16

inherit F_DBASE;

#include <ansi.h>
#define MAX_TIMES 20

protected static mapping task_list=([]);
protected static object *task_ob=({});
protected static mapping ok_dir=([
	"/d/huashan/":"华山",
        "/d/wudang2/":"武当山",
	"/d/shaolin/":"少林寺",
	"/d/gumu/":"古墓",
	"/d/daili/":"大理",
	"/d/pker/":"杀手帮",
	"/d/taishan/":"泰山",
	"/d/xiangyang/":"襄阳",
	"/d/xingxiu/":"星宿",
	"/d/quanzhou/":"泉州",
	"/d/village/":"小山村",
	"/d/quanzhen/":"全真",
	"/d/taohuadao/":"桃花岛",
	"/d/pingxiwangfu/":"平西王府",
	"/d/riyuejiao/":"日月神教",
	"/d/gaibang/":"丐帮",
	"/d/diaoyudao/":"钓鱼岛",
	"/d/mingjiao/":"明教",
	"/d/guiyunzhuang/":"归云庄",
        "/d/emei/":"峨嵋",
        "/d/city/":"扬州",
        "/d/lingjiu/":"灵鹫",
]);

void update_task();
object random_place();
object random_npc(object);
int move_to(object,object);
string query_task_list();
void task_done(string);
int task_give(object,object,object);
object do_clone(object,object);
void give_reward(object,object);
mixed query_location(string);
void pre_destruct();

void create()
{
	seteuid(getuid());
	set("channel_id",HIW"北大侠客行任务榜"NOR);
	update_task();
}

void pre_destruct()
{
	for(int j=0;j<sizeof(task_ob);j++)
	{
		if(!undefinedp(task_ob[j])&&objectp(task_ob[j]))
		destruct(task_ob[j]);
	}
	task_ob=({});
}

void update_task()
{
	string file,*task=({}),file2,npc_s,room_s,*npc_list=({}),*key,err;
	mapping tmp=([]);
	object ob,where,room;
	task_list=([]);
	for(int j=0;j<sizeof(task_ob);j++)
	{
		if(!undefinedp(task_ob[j])&&objectp(task_ob[j]))
		destruct(task_ob[j]);
	}
	task_ob=({});
	if(!file=read_file("/task/task_list")) return;
	if(!file2=read_file("/task/npc_list")) return;
	task=explode(file,"\n");
	npc_list=explode(file2,"\n");
	for(int j=0;j<sizeof(npc_list);j++)
	{
		
		if(sscanf(npc_list[j],"%s:%s",npc_s,room_s)!=2) continue;
		tmp[npc_s]=room_s;
	}
	key=keys(tmp);
	
	for(int i=0;i<sizeof(task);i++)
	{
		int num;
		object npc;
		reset_eval_cost();
		err=catch(ob=new(task[i]));
		if(err) {
			log_file("task","cannt new ob:"+task[i]+"\n");
			continue;
		}
		for(int kk=0;kk<10;kk++)
		{
		where=random_place();
		if(where==this_object()) continue;
		if((num=member_array(ob->query("task_owner"),key))!=-1)	
		{
		
			if(!objectp(room=load_object(tmp[key[num]]))) continue;
			if(!objectp(npc=present(key[num],room))) continue;
	//		log_file("task",npc->name()+ob->name()+num+key[num]+tmp[key[num]]+"\n");
			npc->set("task_ob",ob->query("id"));
			npc->set("no_clean_up",1);
			ob->set("no_clean_up",1);
		}
		
                 if(!move_to(ob,where)) {continue;}
		task_list[npc->name()+"的"+ob->query("name")]=HIY"(未完成)"NOR;
		task_ob+=({ob});
		break;
		}
	}
        CHANNEL_D->do_channel(this_object(),"chat",HIR"侠客榜任务分配完成！\n"NOR);
	remove_call_out("update_task");
        call_out("update_task",1200);
}

object random_place()
{
	string main_dir,*place=({}),*dir,filename,*dirs,err;
	object output;
	int num,tmp;
	dirs=keys(ok_dir);
	main_dir=dirs[random(sizeof(dirs))];
	//log_file("task",main_dir+"\n");
	dir=get_dir(main_dir);
	for(int i=0;i<sizeof(dir);i++)
	{
		if(file_size(main_dir+dir[i])<=0||sscanf(dir[i],"%s.c",filename)!=1)
		continue;
		place+=({dir[i]});
	//	log_file("task",dir[i]+"\n");
	}
	num=sizeof(place);
	//log_file("task",num+"\n");
	while(num--)
	{
		tmp=random(sizeof(place));
		err=catch(call_other(main_dir+place[tmp],"??"));
		if(err)
		{
             log_file("task:",main_dir + place[tmp]+"is not load\n");
			continue;
		}
		else
		{
			if(!(output=load_object(main_dir+place[tmp]))) continue;
			output->set("main_dir",main_dir);
			return output;
		}
		
	}
//	log_file("task","cannt find correct where\n");
	return this_object();
}

int move_to(object source,object target)
{
	object *inv,*ls=({});
	mapping ob;
	string *key;
         if(!objectp(source)||!objectp(target)) return 0;
	inv=all_inventory(target);
	ob=target->query("objects");
        if (!target->query("exits"))
                 log_file("task","no exits:" + base_name(target) + ".c(" + target->query("short") + ")\n");

	if(sizeof(ob)>0)
	{
		key=keys(ob);
		for(int i=0;i<sizeof(inv);i++)
		{
			if(member_array(base_name(inv[i]),key)!=-1||
			member_array(base_name(inv[i])+".c",key)!=-1)
			if(living(inv[i])&&
                                function_exists("die",inv[i])=="/feature/damage")
			ls+=({inv[i]});
		}
	}
	if(sizeof(ls)<=0) return 0;
	if(source->move(ls[random(sizeof(ls))]))
	return 1;
        else {
                 log_file("task","cannot move:random(inv) of " + base_name(target) + ".c(" + target->query("short") + "\n");
                return 0;
        }

}

string query_task_list()
{
	string output="",*key;
	key=keys(task_list);
	for(int i=0;i<sizeof(key);i++)
	{
		output+=sprintf("	%-25s%s\n",key[i],task_list[key[i]]);
	}
	return output;
}

void task_done(object ob)
{
	string *key;
	int num;
	key=keys(task_list);
	if(num=member_array(ob->query("task_owner_cname")+"的"+ob->query("name"),key)!=-1
	&&member_array(ob,task_ob)!=-1) 
	{
		string index=ob->query("task_owner_cname")+"的"+ob->query("name");
		task_list[index]=HIR"(已完成)"NOR;
		task_ob-=({ob});
	}
	
	return;
}

int task_give(object me,object who,object ob)
{
	object target,where;
	string tmp;
	int timer=0;
	if(ob->query("task_owner")==who->query("id")&&userp(me)
	&&task_list[ob->query("task_owner_cname")+"的"+ob->query("name")]!=HIR"(已完成)"NOR)
	{
	task_done(ob);
	who->delete("task_ob");
	who->delete("no_clean_up");
	give_reward(me,ob);
	destruct(ob);
	who->command("smile");
	me->add_temp("get_taskob",1);
	if(me->query_temp("get_taskob")>9) me->set_temp("get_taskob",4);
	target=random_npc(me);
	message("vision",HIW+who->name()+"说道："+RANK_D->query_self(who)+"已经查到偷走此宝的是"+
	target->name()+"("+target->query("id")+"),\n"+RANK_D->query_respect(me)
	+"若是能将其诛杀，"+RANK_D->query_self(who)+
	"感激不尽，武林中人也必定对阁下刮目相看。\n"+NOR,me);
	where=this_object();
	while(where==this_object()&&++timer<10)
	{
		where=random_place();
	}
	if(!objectp(where))
	{
		message("vision","不过目前他一点儿消息也没有。\n",me);
		return 1;
	}
	//write(where->query("main_dir")+"\n"+ok_dir[where->query("main_dir")]+"\n"+
//	base_name(where)+"\n");
	tmp=ok_dir[where->query("main_dir")];
	message("vision",HIW+who->name()+"说道：前几天江湖传言见到此恶贼在"+tmp+"出现，不知消息是否可靠。\n"+NOR,me);
	target->set("task_bekill",me->query("id"));
	target->set("wait_time",900-50*random(me->query_temp("task_level")));
	target->set("task_level",me->query_temp("task_level"));
	me->set_temp("task_target",target->query("id"));
	target->goto_leave();
	target->move(where);
	return 1;
	}
	return 0;
	
}
	
object random_npc(object me)
{
	object output;
	string nickname,name,*tmp,*pinying;
	mapping skill;
	name=NAME_D->create_name();
	nickname=NAME_D->create_nick();
	tmp=explode(name,"@");
	pinying=explode(tmp[1]," ");
	output=new("/task/npc/target");
	output->set_name(tmp[0],({tmp[1],pinying[0],pinying[1]}));
	output->set("nickname",nickname);
	output->set("gender",random(3)>0?"男性":"女性");//male sadan is more..:)
	output=do_clone(output,me);
	return output;
}

object do_clone(object output,object me)
{
    object *inv, newob;
    mapping hp_status, skill_status, map_status, prepare_status;
    string *sname, *mname, *pname;
    int i, temp,lvl,exp,exp_reward,pot_reward;

    seteuid( geteuid(output) );
    lvl=me->query_temp("task_level");

/* copy entire dbase values */


    hp_status = me->query_entire_dbase();


        output->set("str", hp_status["str"]);
        output->set("int", hp_status["int"]);
        output->set("con", hp_status["con"]);
	output->set("dex", hp_status["dex"]);
        output->set("age", hp_status["age"]);


        output->set("max_qi",    hp_status["max_qi"]*(lvl+1)/4);
        output->set("eff_qi",    output->query("max_qi"));
        output->set("qi",        output->query("max_qi"));
        output->set("max_jing",  hp_status["max_jing"]*(lvl+1)/4);
        output->set("eff_jing",  output->query("max_jing"));
        output->set("jing",      output->query("max_jing"));
        output->set("max_neili", hp_status["max_neili"]*(lvl+1)/4);
        output->set("neili",     output->query("max_neili"));
        output->set("max_jingli",hp_status["max_jingli"]*(lvl+1)/4);
        output->set("jingli",    output->query("max_jingli"));
        output->set("jiali",     to_int(sqrt(to_float(output->query("max_neili"))))/6);
        output->set("gender",    hp_status["gender"]);
        output->set("combat_exp",hp_status["combat_exp"]/10*(lvl+3));
        
        exp=me->query("combat_exp");
	if(exp<30000) {
	    exp_reward=300+exp/60;
	    pot_reward=50+exp/300;
	} else if(exp<300000) {
	    exp_reward=600+exp/600;
	    pot_reward=100+exp/6000;
	    
	} else if(exp<3000000) {
	    exp_reward=2000+exp/6000;
	    pot_reward=150+exp/60000;
	    
	} else {
	    exp_reward=3000+random(500);
	    pot_reward=250+random(50);
	    
	}
	pot_reward=pot_reward*(lvl+1)/6;
	exp_reward=exp_reward*(lvl+1)/6;
	output->set("kill_reward/pot",pot_reward);
	output->set("kill_reward/exp",exp_reward);
	return output;
}

void give_reward(object me,object ob)
{
	int exp_r,pot_r,rpoint;
	rpoint=ob->query("reward_point");
	exp_r=35*(rpoint+1)*(me->query_temp("get_taskob")+1)/3;
	pot_r=5*(rpoint+1)*(me->query_temp("get_taskob")+1)/3;
	me->add("combat_exp",exp_r);
	me->add("potential",pot_r);
	message("vision","你被奖励了"+chinese_number(exp_r)+"点经验和"+
	chinese_number(pot_r)+"点潜能！\n",me);
	return;
}

mixed query_location(string arg)
{
	string *biaodian=({
		"，",
		"。",
		"“",
		"”",
		"！",
		"？",
		"（",
		"）",
		"：",
		"；",
		"、",
		"《",
		"》",
		"〉",
		"〈",
		"’",
		"‘",
	});
	
	string *key,*owner,*name,ow,na,des,*ch=({});
	string output=arg+"在一个有着";
	object ob,where;
	mapping exits;
	int tmp;
	key=keys(task_list);
	if(member_array(arg,key)!=-1&&task_list[arg]!=HIR"(已完成)"NOR)
	{
		int flag=0,index;
		for(int i=0;i<sizeof(task_ob);i++)
		{
			if(undefinedp(task_ob[i])||!objectp(task_ob[i])) return -1;
			if(arg==task_ob[i]->query("task_owner_cname")+"的"+
			task_ob[i]->query("name")) 
			{
				index=i;
				flag=1;
				break;
			}
			
			
		}
		if(flag)
		{
			ob=task_ob[index];
			where=ob;
			while(1)
			{
				where=environment(where);
				if(!where) return -1;
				if(!where->is_character()&&!clonep(where)) break;
			}
			
			exits=where->query("exits");
			if(sizeof(exits)>0)
			{
				key=keys(exits);
				for(int i=0;i<sizeof(key);i++)
				{
					output+=HIY+key[i]+NOR+(i==(sizeof(key)-1)?"":",");
				}
				output+="的出口的地方。\n";
			}
			else
			{
				output=arg+"在一个没有出口的地方。\n";
			}
			des=where->query("long");
			if(sizeof(des)==0) return output;
			for(int i=0;i<sizeof(des);i++)
			{
				if(des[i]>160&&des[i]<255)
				{
					if(member_array(des[i..i+1],biaodian)==-1)
					{
						ch+=({des[i..i+1]});
					}
					i++;
					
				}
				
			}
			if(sizeof(ch)==0) return output;
			if(sizeof(ch)==1) {
				output+="这个地方的描述只有一个字："+ch[0]+"\n";
				return output;
			}
			
			tmp=random(sizeof(ch));
			if(tmp+1==sizeof(ch)) tmp=0;
			output+="这个地方的描述中含有这样的字眼："+ch[tmp]+ch[tmp+1];
			tmp+=random(5)+1;
			if(tmp>=sizeof(ch)-1) tmp=0;
			output+=","+ch[tmp]+ch[tmp+1]+"\n";
			return output;
		}
		
		return -2;
	}
}

			
			
			
			
			
			
		





