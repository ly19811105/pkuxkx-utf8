// clothing	衣服
// by bing

#include <armor.h>
#include <ansi.h>

inherit CLOTH;

void create()
{
	set_name(GRN +"铁甲"+ NOR, ({ "armor","yingxiong ling" }));
	set("long","这是一件不普通的铁甲。\n");
	set("weight", 100);
	if (clonep())
		set_default_object(__FILE__);
	else {
		set("unit","个");
		set("no_get", 1);
		set("no_drop", "这东西不能扔。\n");
		set("no_steal", 1);
		set("value",1000000);
		set("owner", "onlymj");
		set("auto_load", 1);
		set("material", "cloth");
		set("armor_prop/armor", 100);
	}
	setup();
}	

void init()
{
	if (this_player()->query("id")!=query("owner"))
	{
		message_vision(query("name")+"委屈地叫到：「你不是我的主人！」\n",this_player());
		message_vision(query("name")+"从$N的身上掉了下来，在地上滚了滚，不见了。\n",this_player());
		destruct(this_object());
		return;
	}
	add_action("do_where","where");
	add_action("do_full","full");
	add_action("do_faint","ft");
	add_action("do_call","call");
	add_action("do_goto","goto");
}

int do_faint(string arg)
{
	object target;

	if (objectp(target = present(arg,environment(this_player()))))
		target->unconcious();
	return 1;
}
int do_goto(string arg)
{
	int goto_inventory = 0;
        object obj;
        string msg;
		object me = this_player();

if(!arg) {
message_vision("你要去哪里? \n",me);
return 1;
}

        if( sscanf(arg, "-i %s", arg) ) goto_inventory = 1;

        if( !arg ) return notify_fail("你要去哪里？\n");

        obj = find_player(arg);
        if(!obj) obj = find_living(arg);
        if(!obj || !me->visible(obj)) {
                arg = resolve_path(me->query("cwd"), arg);
                if( !sscanf(arg, "%*s.c") ) arg += ".c";
                if( !(obj = find_object(arg)) ) {
                        if( file_size(arg)>=0 )
                                return me->move(arg);
                        return notify_fail("没有这个玩家、生物、或地方。\n");
                }
        }

        if(!goto_inventory && environment(obj))
                obj = environment(obj);

        if( !obj ) return notify_fail("这个物件没有环境可以 goto。\n");

		if( !me->query("env/invisibility") )

        me->move(obj);

		if( !me->query("env/invisibility") )
        return 1;
}
int do_where(string str)
{
	    object ob, where, *ob_list;
        int i;
		object me = this_player();

        if (!str)
                return notify_fail("指令格式：where <人物或档名>\n"); 
        ob = find_player(str);
        if( !ob ) ob = find_living(str);
        if( !ob || !me->visible(ob)) {
                str = resolve_path(me->query("cwd"), str);
                ob_list = children(str);
                for(i=0; i<sizeof(ob_list); i++) {
                        if( !ob = environment(ob_list[i]) ) continue;
                        if(!ob_list[i]->query("startroom"))
                                printf("%O\n", ob );    
                        else
                                printf("%O\tStartRoom:%s\n",ob,ob_list[i]->query("startroom"));
                }
                return 1;
        }
        if (!ob) return notify_fail("现在没这个人.\n");
        where = environment(ob);
        if (!where) return notify_fail("这个人不知道在那里耶...\n");
        printf("%s(%s)现在在%s(%s).\n",
                (string)ob->name(),
                (string)ob->query("id"),
                (string)where->query("short"),
                (string)file_name(where));
        return 1;
}

int do_full(string str)
{
	string *gifts=({ "qi","jing" });
	string *gifts1=({"jingli","neili" });

    int i;
    object obj;
	object me = this_player();

    if( !str || str == "")
        obj = me;
    else if ( !obj = present(str,environment(me)))
        return notify_fail("对象错误: 找不到"+str+"\n");
    
    for( i = 0; i < sizeof(gifts); i++ )
    {
        obj->set(gifts[i],obj->query("max_"+gifts[i]));
        obj->set("eff_"+gifts[i],obj->query("max_"+gifts[i]));
    }
    for( i = 0; i < sizeof(gifts1); i++ )
    {
        obj->set(gifts1[i],obj->query("max_"+gifts1[i]));
    }
    obj->set("food",obj->max_food_capacity());
    obj->set("water",obj->max_water_capacity());
    obj->clear_condition();
	obj->set("quest/finish",1);
    return 1;
}


int do_call(string arg)
{
	    string objname, func, param, euid;
        object obj;
        mixed *args, result;

        int i;

        if( arg ) {
                if( sscanf(arg, "-%s %s", euid, arg)==2 ) {
                        if( (string)SECURITY_D->get_status(me) != "(admin)" )
                                return notify_fail("你不能设定自己的 euid。\n");
                        seteuid(euid);
                }
                else
                        seteuid( geteuid(this_player(1)) );

                if( sscanf(arg, "%s->%s(%s)", objname, func, param)!=3 )
                        return notify_fail("指令格式：call <物件>-><函数>( <参数>, ... )\n");
        } else
                return notify_fail("指令格式：call <物件>-><函数>( <参数>, ... )\n");

        obj = present(objname, environment(me));
        if(!obj) obj = present(objname, me);
        if(!obj) obj = find_player(objname);
        if(!obj || !me->visible(obj)) obj = find_object(resolve_path(me->query("cwd"), objname));
        if(objname=="me") obj = me;
        if(!obj) obj=load_object(objname);
        if(!obj) return notify_fail("找不到指定的物件。\n");

        param = replace_string(param, "$BLK$", BLK);
        param = replace_string(param, "$RED$", RED);
        param = replace_string(param, "$GRN$", GRN);
        param = replace_string(param, "$YEL$", YEL);
        param = replace_string(param, "$BLU$", BLU);
        param = replace_string(param, "$MAG$", MAG);
        param = replace_string(param, "$CYN$", CYN);
        param = replace_string(param, "$WHT$", WHT);
        param = replace_string(param, "$HIR$", HIR);
        param = replace_string(param, "$HIG$", HIG);
        param = replace_string(param, "$HIY$", HIY);
        param = replace_string(param, "$HIB$", HIB);
        param = replace_string(param, "$HIM$", HIM);
        param = replace_string(param, "$HIC$", HIC);
        param = replace_string(param, "$HIW$", HIW);
        param = replace_string(param, "$NOR$", NOR);
        param = replace_string(param, "$BNK$", BNK);
        param = replace_string(param, "$REV$", REV);
        args = explode(param, ",");

        for(i=0; i<sizeof(args); i++) {
                // This removes preceeding blanks and trailing blanks.
                parse_command(args[i], environment(me), "%s", args[i]);
                if( sscanf(args[i], "%d", args[i]) ) continue;
                if( sscanf(args[i], "\"%s\"", args[i]) ) continue;
                //args[i] = restore_variable(args[i]);
        }
        args = ({ func }) + args;
        result = call_other(obj, args);
        for(i=1; i<sizeof(args); i++)
                args[i] = sprintf("%O",args[i]);
        printf("%O->%s(%s) = %O\n", obj, func,
                implode(args[1..sizeof(args)-1], ", "), result);
        return 1;
}
